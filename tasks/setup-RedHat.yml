# tasks file for iteasy.ansible.roles.webhost_manager
# 데이터베이스 접속 계정과 비밀번호 유효성 검사
- name: Check if MySQL root credentials are valid
  shell: "mysql -u {{ mysql_root_user }} -p'{{ mysql_root_password }}' -e 'SHOW DATABASES;'"
  register: mysql_credential_check
  failed_when: "'Access denied' in mysql_credential_check.stderr"
  changed_when: false
  when: db_name is defined and db_name != "" and db_user is defined and db_user != ""

- name: Check if IncludeOptional conf.d/*.conf exists in httpd.conf
  lineinfile:
    path: /etc/httpd/conf/httpd.conf
    line: IncludeOptional conf.d/*.conf
    state: present
    insertafter: EOF

- name: Check if IncludeOptional conf.d/**/*.conf exists in httpd.conf
  lineinfile:
    path: /etc/httpd/conf/httpd.conf
    line: IncludeOptional conf.d/vhosts/**/*.conf
    state: present
    insertafter: EOF

# 유저 생성
- name: Ensure group "www" exists
  ansible.builtin.group:
    name: www
    state: present

- name: Ensure user exists
  user:
    name: "{{ user_id }}"
    password: "{{ user_pass | password_hash('sha512') }}"
    shell: /bin/bash
    home: "/home/{{ user_id }}"
    create_home: yes
    group: www

# 쿼타 설정
- name: Prepare disk quota command
  set_fact:
    quota_command: >
      edquota -u {{ user_id }} 
      {{ (disk_quota == 'unlimited') | ternary('0 0 0 0', ((disk_quota | int * 1024 * 1000)) ~ ' ' ~ ((disk_quota | int * 1024 * 1000)) ~ ' 0 0') }}
  when: disk_quota is defined and disk_quota != ""

- name: Debug disk quota command
  debug:
    msg: "{{ quota_command }}"
  when: disk_quota is defined and disk_quota != ""

- name: Set disk quota
  command: "{{ quota_command }}"
  when: disk_quota is defined and disk_quota != ""

# 유저 폴더 생성
- name: Create necessary directories with specific modes
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - { path: "/home/{{ user_id }}", owner: "{{ user_id }}", group: "www", mode: "0701" }
    - { path: "/home/{{ user_id }}/www", owner: "{{ user_id }}", group: "www",mode: "0755" }
    - { path: "/etc/httpd/logs/vhosts/{{ user_id }}", owner: "root", group: "root",mode: "0701" }
    - { path: "/etc/httpd/conf.d/vhosts/{{ user_id }}", owner: "root", group: "root",mode: "0701" }

- name: Create index.html from template
  template:
    src: templates/index.html.j2
    dest: /home/{{ user_id }}/www/index.html

# 데이터베이스
- name: Create SQL file
  template:
    src: templates/createDB.j2
    dest: "/tmp/db_setup_{{ ansible_date_time.iso8601_basic_short }}.sql"
  when: db_name is defined and db_name != "" and db_user is defined and db_user != ""

- name: Execute SQL file
  shell: mysql -u {{ mysql_root_user }} -p'{{ mysql_root_password }}' < /tmp/db_setup_{{ ansible_date_time.iso8601_basic_short }}.sql
  when: db_name is defined and db_name != "" and db_user is defined and db_user != ""

- name: Remove SQL file
  file:
    path: "/tmp/db_setup_{{ ansible_date_time.iso8601_basic_short }}.sql"
    state: absent
  when: db_name is defined and db_name != "" and db_user is defined and db_user != ""

# conf/nobots.conf
- name: Check if conf/nobots.conf exists
  stat:
    path: /etc/httpd/conf/nobots.conf
  register: nobots_conf

- name: Create nobots.conf from template if it does not exist
  template:
    src: templates/nobots.j2
    dest: /etc/httpd/conf/nobots.conf
  when: not nobots_conf.stat.exists

# conf.d/vhosts.conf
- name: Backup and configure vhosts.conf
  block:
    - name: Configure vhosts.conf
      template:
        src: vhost.j2
        dest: /tmp/vhosts.conf_tempfile

    - name: Debug vhosts.conf_tempfile existence
      stat:
        path: /tmp/vhosts.conf_tempfile
      register: tempfile_status

    - name: Ensure vhosts.conf_tempfile exists
      fail:
        msg: "Temporary file /tmp/vhosts.conf_tempfile was not created by template."
      when: not tempfile_status.stat.exists

    - name: Slurp vhosts.conf_tempfile content
      ansible.builtin.slurp:
        src: /tmp/vhosts.conf_tempfile
      register: slurped_file
      when: tempfile_status.stat.exists

    - name: Create and merge vhosts configuration
      copy:
        content: "{{ slurped_file.content | b64decode }}"
        dest: /etc/httpd/conf.d/vhosts/{{ user_id }}/vhosts.conf
        owner: "{{ user_id }}"
        group: www
        mode: '0644'
      when: tempfile_status.stat.exists

  rescue:
    - name: Restore backup of vhosts.conf
      copy:
        src: /etc/httpd/conf.d/vhosts/{{ user_id }}/vhosts.conf.old
        dest: /etc/httpd/conf.d/vhosts/{{ user_id }}/vhosts.conf
        remote_src: yes

    - name: Rename vhosts temporary file to indicate failure
      command: mv /tmp/vhosts.conf_tempfile /tmp/vhosts.conf_tempfile_failed

# conf.d/cband.conf
- name: Backup and configure cband.conf
  block:
    - name: Configure cband.conf
      template:
        src: cband.j2
        dest: /tmp/cband.conf_tempfile

    - name: Debug cband.conf_tempfile existence
      stat:
        path: /tmp/cband.conf_tempfile
      register: tempfile_status

    - name: Ensure cband.conf_tempfile exists
      fail:
        msg: "Temporary file /tmp/cband.conf_tempfile was not created by template."
      when: not tempfile_status.stat.exists

    - name: Slurp cband.conf_tempfile content
      ansible.builtin.slurp:
        src: /tmp/cband.conf_tempfile
      register: slurped_file
      when: tempfile_status.stat.exists

    - name: Create and merge cband configuration
      copy:
        content: "{{ slurped_file.content | b64decode }}"
        dest: /etc/httpd/conf.d/vhosts/{{ user_id }}/cband.conf
        owner: "{{ user_id }}"
        group: www
        mode: '0644'
      when: tempfile_status.stat.exists

  when: cband_limit is defined and cband_limit != ""

  rescue:
    - name: Restore backup of cband.conf
      copy:
        src: /etc/httpd/conf.d/vhosts/{{ user_id }}/cband.conf.old
        dest: /etc/httpd/conf.d/vhosts/{{ user_id }}/cband.conf
        remote_src: yes

    - name: Rename cband temporary file to indicate failure
      command: mv /tmp/cband.conf_tempfile /tmp/cband.conf_tempfile_failed


# Apache 설정 테스트 및 서비스 재시작
- name: Test Apache configuration
  command: /usr/sbin/apachectl -t
  register: apache_test

- name: Check Apache configuration test result
  fail:
    msg: "Apache configuration test failed, changes have been rolled back."
  when: apache_test.rc != 0

- name: Restart Apache
  service:
    name: httpd
    state: restarted
  when: apache_test.rc == 0

# # curl이 설치되었는지 확인하고, 설치되지 않았다면 설치합니다.
# - name: Ensure curl is installed
#   ansible.builtin.package:
#     name: curl
#     state: present

# # 가상 호스트에 HTTP 요청을 보냅니다.
# - name: Make a request to the configured virtual host
#   shell: 'curl -s -H "Host: {{ vhost_domain }}" localhost'
#   register: curl_output
#   changed_when: false

# # 요청의 응답 내용이 예상한 내용과 일치하는지 검사합니다.
# - name: Verify the content of index.html
#   assert:
#     that:
#       - "'{{ expected_content }}' in curl_output.stdout"
#     fail_msg: "Expected content not found in the response from the virtual host"
#     success_msg: "Virtual host is serving the expected content"
#   vars:
#     expected_content: "{{ lookup('template', 'templates/index.html.j2') }}"

