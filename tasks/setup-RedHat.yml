# tasks file for iteasy.ansible.roles.webhost_manager
#TODO: quota 확인함. 추가하면될 듯
# 유저 생성
- name: Ensure group "www" exists
  ansible.builtin.group:
    name: www
    state: present

- name: Ensure user exists
  user:
    name: "{{ user_id }}"
    password: "{{ user_pass | password_hash('sha512') }}"
    shell: /bin/bash
    home: "/home/{{ user_id }}"
    create_home: yes
    group: www

# 쿼타 설정
- name: Prepare disk quota command
  set_fact:
    quota_command: >
      edquota -p test7 -u {{ user_id }} 
# - name: Prepare disk quota command
#   set_fact:
#     quota_command: >
#       setquota -u {{ user_id }} 
#       {{ (disk_quota == 'unlimited') | ternary('0 0 0 0', ((disk_quota | int * 1024 * 1000)) ~ ' ' ~ ((disk_quota | int * 1024 * 1000)) ~ ' 0 0') }} -a

- name: Debug disk quota command
  debug:
    msg: "{{ quota_command }}"

# - name: Set disk quota
#   command: "{{ quota_command }}"
#   when: disk_quota is defined

# 유저 폴더 생성
- name: Create necessary directories with specific modes
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ user_id }}"
    group: www
    mode: "{{ item.mode }}"
  with_items:
    - { path: "/home/{{ user_id }}", mode: "0701" }
    - { path: "/home/{{ user_id }}/www", mode: "0755" }
    - { path: "/etc/httpd/logs/vhosts/{{ user_id }}", mode: "0701" }

- name: Create index.html from template
  template:
    src: templates/index.html.j2
    dest: /home/{{ user_id }}/www/index.html

# 데이터베이스
- name: Check if database exists
  mysql_db:
    name: "{{ db_name }}"
    state: present
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
  register: db_result
  failed_when: db_result.db | selectattr('name', 'equalto', db_name) | list | length > 0
  when: db_name != ""

- name: Ensure MySQL database is present
  mysql_db:
    name: "{{ db_name }}"
    state: present
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
  when: db_name != "" and not (db_result.db | selectattr('name', 'equalto', db_name) | list | length > 0)

- name: Check if user exists
  mysql_user:
    name: "{{ db_user }}"
    check_implicit_admin: yes
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
  register: user_result
  failed_when: user_result.user | selectattr('name', 'equalto', db_user) | list | length > 0
  when: db_name != "" and db_user != ""

- name: Ensure MySQL user is present
  mysql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    priv: "{{ db_name }}.*:ALL"
    state: present
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
  when: db_name != "" and db_user != "" and not (user_result.user | selectattr('name', 'equalto', db_user) | list | length > 0)

# conf/nobots.conf
- name: Check if conf/nobots.conf exists
  stat:
    path: /etc/httpd/conf/nobots.conf
  register: nobots_conf

- name: Create nobots.conf from template if it does not exist
  template:
    src: templates/nobots.j2
    dest: /etc/httpd/conf/nobots.conf
  when: not nobots_conf.stat.exists

# conf.d/vhosts.conf
- name: Backup and configure vhosts.conf
  block:
    - name: Backup vhosts.conf
      copy:
        src: /etc/httpd/conf.d/vhosts.conf
        dest: /etc/httpd/conf.d/vhosts.conf.old
        remote_src: yes

    - name: Configure vhosts.conf
      template:
        src: vhost.j2
        dest: /tmp/vhosts.conf_tempfile

    - name: Debug vhosts.conf_tempfile existence
      stat:
        path: /tmp/vhosts.conf_tempfile
      register: tempfile_status

    - name: Ensure vhosts.conf_tempfile exists
      fail:
        msg: "Temporary file /tmp/vhosts.conf_tempfile was not created by template."
      when: not tempfile_status.stat.exists

    - name: Slurp vhosts.conf_tempfile content
      ansible.builtin.slurp:
        src: /tmp/vhosts.conf_tempfile
      register: slurped_file
      when: tempfile_status.stat.exists

    - name: Merge vhosts configuration
      lineinfile:
        path: /etc/httpd/conf.d/vhosts.conf
        insertafter: EOF
        line: "{{ slurped_file.content | b64decode }}"
      when: tempfile_status.stat.exists

  rescue:
    - name: Restore backup of vhosts.conf
      copy:
        src: /etc/httpd/conf.d/vhosts.conf.old
        dest: /etc/httpd/conf.d/vhosts.conf
        remote_src: yes

    - name: Rename vhosts temporary file to indicate failure
      command: mv /tmp/vhosts.conf_tempfile /tmp/vhosts.conf_tempfile_failed

# conf.d/cband.conf
- name: Backup and configure cband.conf
  block:
    - name: Backup cband.conf
      copy:
        src: /etc/httpd/conf.d/cband.conf
        dest: /etc/httpd/conf.d/cband.conf.old
        remote_src: yes

    - name: Configure cband.conf
      template:
        src: cband.j2
        dest: /tmp/cband.conf_tempfile

    - name: Debug cband.conf_tempfile existence
      stat:
        path: /tmp/cband.conf_tempfile
      register: tempfile_status

    - name: Ensure cband.conf_tempfile exists
      fail:
        msg: "Temporary file /tmp/cband.conf_tempfile was not created by template."
      when: not tempfile_status.stat.exists

    - name: Slurp cband.conf_tempfile content
      ansible.builtin.slurp:
        src: /tmp/cband.conf_tempfile
      register: slurped_file
      when: tempfile_status.stat.exists

    - name: Merge cband configuration
      lineinfile:
        path: /etc/httpd/conf.d/cband.conf
        insertafter: EOF
        line: "{{ slurped_file.content | b64decode }}"
      when: tempfile_status.stat.exists

  rescue:
    - name: Restore backup of cband.conf
      copy:
        src: /etc/httpd/conf.d/cband.conf.old
        dest: /etc/httpd/conf.d/cband.conf
        remote_src: yes

    - name: Rename cband temporary file to indicate failure
      command: mv /tmp/cband.conf_tempfile /tmp/cband.conf_tempfile_failed


- name: Test Apache configuration
  command: /usr/sbin/apachectl -t
  notify:
    - Restart Apache
  failed_when: false
  register: apache_test

- name: Check Apache configuration test result
  fail:
    msg: "Apache configuration test failed, changes have been rolled back."
  when: apache_test.rc != 0
